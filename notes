1.urlopen()返回的对象，可以使用read()进行读取，同样也可以使用geturl()方法、info()方法、getcode()方法。

二：re用法
1.re的方法
    编译：re.compile()接受可选的标志参数。
为了在匹配时不区分大小写，在编译规则时加上re.I，例如：
csvt_re = re.compile(r'csvt',re.I)
    match()通常用来是否匹配成功。实际程序中，最常见的做法是将‘‘MatchObject’’保存在一个实际变量中，然后检查它是否为None。
    macth()匹配，只有当要匹配的字符串在开头的位置，才会被匹配出来，当匹配到后，会返回一个字符串对象，例如：
>>>x = s_re.match('\\\rcsvt')
>>>x
<_sre.SRE_Match object; span=(0, 6), match='\\\rcsvt'>
用x.group()来将字符串对象转换成具体匹配到的字符串。
如果没有匹配到，则什么也不返回。
    search()跟match()区别在于，search()不管匹配字符串的位置是否在开头，都能匹配到。
    findall()匹配所有字符串并返回列表。
    finditer()匹配所有，但是返回的是迭代器，用next()方式查看。
    re.sub()用于字符串替换。例如：
    rs = r'c..t'
    re,sub(rs,'python','csst hello')
       python hello
    re.split('.'，s)用于定义以'.'的方式切割字符串s。
2.re的属性
    正则中'.'可以匹配任何一个字符。
    在定义正则表达式时，加上re.S就可以让正则表达式中的'.'匹配'\n'。例如：
    rs = r'a.b'
    re.findall(rs,'a\nb',re.S)
    re.M 用来实现多行匹配，处理多行的一个字符串，用在处理文本文件，分多行写的字符串。
    re.X用在当我们写的正则表达式有多行时。
    email = r'\w{3}@\w+(\.com|\.cn)' 其中的小括号用来分组。当有分组时，会优先返回分组当中的数据。
    >>> re.findall(email,'qwe@qq.com')
    ['.com']


